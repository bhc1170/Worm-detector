
### Worm Detection

import os

def scan_directory(directory):
    suspicious_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            # Implement basic checks for demonstration, e.g., checking file extension
            if file.endswith('.exe') or file.endswith('.dll'):
                suspicious_files.append(file_path)
                # Further checks and YARA rules can be added here
    return suspicious_files

# Usage example
directory_to_scan = '/path/to/scan'
results = scan_directory(directory_to_scan)
if results:
    print("Suspicious files detected:")
    for result in results:
        print(result)
else:
    print("No suspicious files detected.")

### Real-Time Monitoring

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time

class Watcher:
    def __init__(self, directory_to_watch):
        self.observer = Observer()
        self.directory_to_watch = directory_to_watch

    def run(self):
        event_handler = Handler()
        self.observer.schedule(event_handler, self.directory_to_watch, recursive=True)
        self.observer.start()
        try:
            while True:
                time.sleep(5)
        except:
            self.observer.stop()
        self.observer.join()

class Handler(FileSystemEventHandler):
    def on_created(self, event):
        print(f"File created: {event.src_path}")
        # Add scanning or other actions here

    def on_modified(self, event):
        print(f"File modified: {event.src_path}")
        # Add scanning or other actions here

    def on_deleted(self, event):
        print(f"File deleted: {event.src_path}")

# Usage example
watcher = Watcher('/path/to/watch')
watcher.run()

### User Notifications

def notify_user(message):
    print(f"Notification: {message}")

# Usage example
notify_user("Suspicious file detected in /path/to/file")

### Reporting and Logging

import logging

logging.basicConfig(filename='worm_detector.log', level=logging.INFO)

def log_detection(file_path):
    logging.info(f"Suspicious file detected: {file_path}")

# Usage example
log_detection('/path/to/suspicious/file')

### Configuration Options Example (config.json)

{
    "scan_paths": ["/path/to/scan1", "/path/to/scan2"],
    "scan_interval": 60,  # in seconds
    "rules": "example_rule.yar"
}
